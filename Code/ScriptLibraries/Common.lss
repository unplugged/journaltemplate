'++LotusScript Development Environment:2:5:(Options):0:74
Option Public
Option Explicit 
'++LotusScript Development Environment:2:5:(Forward):0:1
Declare Class BaseApplication
Declare Class BaseCSStringTable
Declare Class BaseEventOwnerStringTable As BaseCSStringTable
Declare Class MeetingOwnerStringTable As BaseEventOwnerStringTable
Declare Class TaskOwnerStringTable As BaseEventOwnerStringTable
Declare Class BaseEventParticipantStringTable As BaseCSStringTable
Declare Class MeetingParticipantStringTable As BaseEventParticipantStringTable
Declare Class TaskParticipantStringTable As BaseEventParticipantStringTable
Declare Class MessageTrackStringTable
Declare Class MailToolsStringTable
Declare Class MemoStringTable
Declare Class CopyFactory
Declare Class BaseNoteCopy
Declare Class MemoCopy As BaseNoteCopy
Declare Class CalendarCopy As BaseNoteCopy
Declare Class TaskCopy As BaseNoteCopy
Declare Class GroupCalendarCopy As BaseNoteCopy
Declare Sub NAMEGetComponents(sUserName As String,sRetAbbreviatedName As String,sRetDomain As String)
Declare Function NAMECompare(sName1 As String, sName2 As String) As Integer
Declare Function NAMEFindInList(sKeyName As String, vListOfNames As Variant) As Integer
Declare Function NAMECompareWildcards(Byval sName As String,sWildcard As String) As Integer
Declare Function NAMEGetNumOrgUnits(sName) As Integer
Declare Sub TIMEGetFromItem(sItemName As String, note As NotesDocument, dt1 As NotesDateTime) 
Declare Function TIMECompareDates(dt1 As NotesDateTime, dt2 As NotesDateTime) As Integer
Declare Sub TIMEGetNotesFromLS(vLS As Variant, dtNotes As NotesDateTime)
Declare Function TIMEValidateArgs(sItemname1 As String, sItemName2 As String, note As NotesDocument) As Integer
Declare Function CSGetMailFileOwner() As String
Declare Sub TIMEGetComponents(sDateItem As String, sTimeItem As String, note As NotesDocument, dt1 As NotesDateTime)
Declare Function NOTEUserIsCreator(note As NotesDocument) As Integer
Declare Function NAMEExistsInList(sKeyName As String, vLIstOfNames As Variant) As Integer
Declare Function NOTECopyIntoNewDocument(Byval iNewType As Integer, Byval iFlags As Integer, note As NotesDocument, strnewform As String) As NotesDocument
Declare Function YesNoPrompt(sPrompt As String, sTitle As String) As Integer
Declare Function YesNoCancelPrompt(sPrompt As String, sTitle As String) As Integer
Declare Function DisplayWarn(sError As String, nPrompt As Integer, sTitle As String) As Integer
Declare Sub TIMEAdjustByDifference(Byval lDifference As Long, dtAdjust As NotesDateTime)
Declare Function CSEventDTItemsModified(vBEObject As Variant) As Integer
Declare Function CSEventNeedsReschedule(vBEObject As Variant) As Integer
Declare Sub CSDocOpen(vBEObject As Variant, note As NotesDocument, dtCalInstance As NotesDateTime, Byval dOptions As Long)
Declare Sub CSDocSave(vBEObject As Variant, vCallBackObject As Variant, Byval dAction As Long, Byval dOptions As Long, vContinue As Variant)
Declare Sub CSDocSaveCalendarEntry(vBEObject As Variant, bOwner As Integer, strCurrentType As String)
Declare Sub CSDocSendPrimaryNotice(vBEObject As Variant, vCallBackObject As Variant, vContinue As Variant)
Declare Sub CSDocUpdatePersonalCategories(note As NotesDocument, profile As NotesDocument)
Declare Sub CSExtAppDocSave(note As notesdocument, Byval daction As Long, bIsTask As Integer, vContinue As Variant)
Declare Sub wInstantiateObjectVariables
Declare Sub wMessagePageHeader
Declare Sub CopyProfileValues(noteSrc As NotesDocument, noteDest As NotesDocument)
Declare Function wGetDBPath  As Variant
Declare Sub SetInternationalFormatHelpers( note As NotesDocument)
Declare Sub wMarkTempFields(doc As NotesDocument)
Declare Sub wCreateDefaultCalendarProfile
Declare Function wGetCalendarProfile As Integer
Declare Sub CSDocSaveRepeatingEntry(vBEobject As Variant)
Declare Function CSGetMainEventObject(vBEObject As Variant) As Variant
Declare Sub Initialize
Declare Function CSNoteGetType(note As notesdocument) As Integer
Declare Function CSProfileGetAutoAnnivRepeat() As Integer
Declare Function CSEventPerformAction(vBEObject As Variant, Byval strAction As String, Byval bSendNow As Integer, vArgs As Variant) As Integer
Declare Function CSEventPerformActionGuts(vBEObject As Variant, strAction As String, bSendNow As Integer, vArgs As Variant) As Integer

'++LotusScript Development Environment:2:5:(Declarations):0:10

%INCLUDE "lsconst.lss"
%INCLUDE "orgconst.lss"

'Back end classes
Dim session As NotesSession
Dim db As NotesDatabase
Dim note As NotesDocument
Dim profile As NotesDocument
Dim item As NotesItem
Dim NameLookup As NotesName
Dim agentlog As noteslog 
Dim PathAndName As String


'General Purpose classes
Dim Owner As String
Dim NewDocument As Integer

'Client Differenciation
Dim IsWebClient As Variant

Class BaseApplication
 ' Properties
	m_session As NotesSession  ' pointer to current session object
	m_db As NotesDatabase    ' pointer to current database
	m_stringtable As Variant	' Reference to a StringTable object    	
	
	Property Get Session As NotesSession
		Set Session = m_session
	End Property
	
	Property Get Database As NotesDatabase
		Set Database = m_db
	End Property
	
	Property Get StringTable As Variant
		Set StringTable = m_stringtable
	End Property
	
	Property Get DocumentsToProcess As NotesDocumentCollection
		Set DocumentsToProcess = m_db.UnprocessedDocuments
	End Property
	
	Property Get LocalAddressBook As NotesDatabase
		Dim sAddressLine As String
		Dim nPos As Integer
		
		sAddressLine = m_session.getenvironmentstring("names",True)
		
		If Len(sAddressLine) Then
			nPos = Instr(sAddressLine,",")
			If (nPos = 0) Then
				Set LocalAddressBook = m_session.GetDatabase("",sAddressLine)
			Else
				Set LocalAddressBook = m_session.GetDatabase("",Left$(sAddressLine,nPos-1))
			End If
		Else
			Set LocalAddressBook = m_session.GetDatabase("","names.nsf")
		End If
	End Property
	
	
 ' Methods
	Sub New
		Set m_session = New NotesSession
		Set m_db = m_session.CurrentDatabase
	End Sub    
	
	Function CreateDocument As NotesDocument
		Set CreateDocument = New NotesDocument(m_db)
	End Function
	
End Class

Class BaseCSStringTable
	Function GetString(nIndex As Integer, vData As Variant) As String
		Select Case nIndex
		Case INC_COMMENTS											' Include comments on reply notice
			GetString = "Do you want to include any comments on the reply?"
		Case ALARM_TITLE
			GetString = "Alarm Options"
		Case DBLBOOK_TITLE
			GetString = "Double Book"
		Case ERR_FREETIME
			GetString = "An error occured while searching for free time. Continue?"
		Case RPTCHANGE_TITLE
			GetString = "Change Repeating Entry"		
		Case ENTRY_CONF
			GetString = "This entry conflicts with an existing entry. Create anyway?"			
		Case USER_INVALID_DOCUMENT
			GetString = "You must select an instance document to perform these actions."
		Case ERR_CREATE_REPEAT
			GetString = "The maximum number of repeat instances has been reached. Please reduce the number of instances that will be created."
		Case ERR_TITLE
			GetString = "Error"
		Case REPEAT_CONFLICT_PROMPT
			GetString = "The following dates conflict with existing entries or do not fit in your profile times:"
		Case REPEAT_CONFLICT_TITLE
			GetString = "Repeat Conflict"
		Case REPEAT_OPEN_PROMPT
			GetString = "Select the repeat instance date you wish to open:"
		Case REPEAT_OPEN_TITLE
			GetString = "Repeat Instance Open"	
		Case ENABLE_OUT_PROMPT
			GetString = "Would you like to setup the Out of Office agent to handle messages while you are away?"
		Case ENABLE_OUT_TITLE
			GetString = "Enable Out Of Office"
		Case RESOURCE_BOOKED_PROMPT
			GetString = "The specified resource is unavailable for the requested time. Please select a new time."
		Case RESOURCE_BOOKED_TITLE
			GetString = "Resource Unavailable"
		Case RESOURCE_FREETIME_ERR_PROMPT
			GetString = "An error occurred while validating the available time for this resource. Please try again later."
		Case WEB_GOBACK
			GetString = "Go Back"
		Case REPEAT_PASTE_PROMPT
			GetString = "The copied entry is a repeating entry. The new entry pasted will be created as a single, non-repeating entry."
		Case REPEAT_PASTE_TITLE
			GetString = "Paste Repeating Entry"		
		Case Else
			GetString = ""
		End Select
	End Function
End Class

Class BaseEventOwnerStringTable As BaseCSStringTable
	Function GetString(nIndex As Integer, vData As Variant) As String
		Select Case nIndex
		Case CANC_TITLE
			GetString = "Cancel options"
		Case RESC_TITLE
			GetString = "Reschedule options"
		Case STS_TITLE
			GetString = "Participant Status"
		Case MODTYPE_TITLE
			GetString = "Change entry type"
		Case PAST_TITLE
			GetString = "Create in Past"
		Case CONF_TITLE
			GetString = "Confirm event"
		Case REM_PART
			GetString = "Select the participant(s) you wish to remove from this event."
		Case REM_PART_TITLE
			GetString = "Remove Participants"
		Case REPEAT_TITLE
			GetString = "Repeat Options"
		Case NO_SEND_LIST
			GetString = "There are no participants to send the notice to."
		Case USER_ACTION_INVALID
			GetString = "You are the owner of this entry. You cannot perform that particular action."
		Case CTRACPT_TITLE
			GetString = "Accept Counter"
		Case CTRDECL_TITLE
			GetString = "Decline Counter"
		Case WEB_TABLE_NAME
			GetString = "Name"
		Case WEB_TABLE_STATUS
			GetString = "Status"
		Case WEB_TABLE_ROLE
			GetString = "Role"			
		Case Else
			GetString = BaseCSStringTable..GetString(nIndex, vData)
		End Select
	End Function
End Class

Class MeetingOwnerStringTable As BaseEventOwnerStringTable
	Function GetString(nIndex As Integer, vData As Variant) As String
		Select Case nIndex
		Case ENTRY_TYPE
			GetString = "Changing the entry type will cancel this meeting. Change anyway?"			
		Case ENTRY_DTMOD
			GetString = "Are you sure you want to change the date/time of this entry?"
		Case ENTRY_PAST
			GetString = "This entry is being created in the past. Create anyway?"
		Case DTMOD_TITLE
			GetString = "Change date/time"
		Case RESC_UPD_MSG
			GetString = "An update notice will be sent to the participants and any rooms/resources you may have requested informing them of this change. "& BaseEventOwnerStringTable..GetString(INC_COMMENTS, Null) 
		Case SEND_INV_MSG
			GetString = "Do you want to send meeting invitations to the appropriate users?"
		Case SEND_INVRES_MSG
			GetString = "Do you want to send meeting invitations and reservation requests?"
		Case SEND_INV_TITLE
			GetString = "Send Invitations"		
		Case VIEWSTATUS_NOMEMBERS_PROMPT
			GetString = "There are no invitees to view the status of at this time."
		Case Else
			GetString = BaseEventOwnerStringTable..GetString(nIndex, vData)
		End Select
	End Function
End Class

Class TaskOwnerStringTable As BaseEventOwnerStringTable
	Function GetString(nIndex As Integer, vData As Variant) As String
		Select Case nIndex
		Case ENTRY_TYPE
			GetString = "Changing the entry type will cancel this to do. Change anyway?"			
		Case ENTRY_DTMOD
			GetString = "Are you sure you want to change the date this to do is due?"
		Case ENTRY_PAST
			GetString = "This to do is being created in the past. Create anyway?"
		Case SEND_INV_MSG
			GetString = "Send to do assignments to the appropriate users?"
		Case SEND_INV_TITLE
			GetString = "Send Assignments"		
		Case RESC_UPD_MSG
			GetString = "An update notice will be sent to all participants of this to do informing them of this change. "& BaseEventOwnerStringTable..GetString(INC_COMMENTS, Null)
		Case VIEWSTATUS_NOMEMBERS_PROMPT
			GetString = "There are no participants to view the status of at this time."
		Case Else
			GetString = BaseEventOwnerStringTable..GetString(nIndex, vData)
		End Select
	End Function
End Class

Class BaseEventParticipantStringTable As BaseCSStringTable
	Function GetString(nIndex As Integer, vData As Variant) As String
		Select Case nIndex
		Case PAST_TITLE
			GetString = "Past"
		Case ACPT_TITLE
			GetString = "Accept options"
		Case DECL_TITLE
			GetString = "Decline options"
		Case UPD_TITLE
			GetString = "Meeting update"
		Case DELE_TITLE
			GetString = "Delegate options"			
		Case CNTR_TITLE
			GetString = "Propose options"
		Case USER_ACTION_INVALID
			GetString = "You are a participant of this entry. You cannot perform that particular action."
		Case STATUS_TITLE
			GetString = "Status Update"
		Case ERR_SEND_DELE
			GetString = "An error occurred sending the delegation notice to the delegatee. Make sure you have spelled their name correctly."
		Case USER_MUST_ACCEPT
			GetString = "You must accept an invitation before performing this action."		
		Case Else
			GetString = BaseCSStringTable..GetString(nIndex, vData)
		End Select
	End Function
End Class

Class MeetingParticipantStringTable As BaseEventParticipantStringTable
	Function GetString(nIndex As Integer, vData As Variant) As String
		Select Case nIndex
		Case RESC_MSG										' Reschedule notice
			GetString = "This meeting has been rescheduled. Would you like to open the reschedule notice?"
		Case CANCEL_MSG
			GetString = "This meeting has been cancelled."	' Message that appears for all cancellation notices
		Case CANCEL_UPD
			GetString = Me.GetString(CANCEL_MSG, Nothing) & " The calendar entry will be updated to reflect this change." 	' User accepted main invitation that is now cancelled
		Case CANCEL_NOACTN
			GetString = Me.GetString(CANCEL_MSG, Nothing) & " You do not need to take any action."								' The main invitation has not been accepted	
		Case ADD_TITLE
			GetString = "Add to Calendar"
		Case STATUS_REMOVED
			GetString = "You are no longer required to attend this meeting. Your calendar will be updated to reflect this."
		Case STATUS_REQUIRED
			GetString = "You are required to attend this meeting. Your calendar will be updated to reflect this."
		Case ERR_BROADCAST
			GetString = "The chairperson of this meeting does not require replies. Select Participant Actions / Accept to add this to your calendar."
		Case ERR_NO_DELEGATE
			GetString = "The chairperson of this meeting has prevented delegation. Please select a different action."
		Case ERR_NO_PROPOSE
			GetString = "The chairperson of this meeting has prevented proposals. Please select a different action."
		Case Else
			GetString = BaseEventParticipantStringTable..GetString(nIndex, vData)
		End Select
	End Function
End Class

Class TaskParticipantStringTable As BaseEventParticipantStringTable
	Function GetString(nIndex As Integer, vData As Variant) As String
		Select Case nIndex
		Case RESC_MSG										' Reschedule notice
			GetString = "The due date for this to do has been changed. Would you like to open the update notice?"
		Case CANCEL_MSG
			GetString = "This to do has been cancelled."	' Message that appears for all cancellation notices
		Case CANCEL_UPD
			GetString = Me.GetString(CANCEL_MSG, Nothing) & " The to do entry will be updated to reflect this change." 	' User accepted main invitation that is now cancelled
		Case CANCEL_NOACTN
			GetString = Me.GetString(CANCEL_MSG, Nothing) & " You do not need to take any action."								' The main invitation has not been accepted	
		Case STATUS_REMOVED
			GetString = "You are no longer assigned to this To Do item. Your To Do list will be updated to reflect this."
		Case STATUS_REQUIRED
			GetString = "You are required to complete this To Do item. Your To Do list will be updated to reflect this."
		Case ERR_BROADCAST
			GetString = "The owner of this to do does not require replies. Select Participant Actions / Accept to add this to your to do list."
		Case ERR_NO_DELEGATE
			GetString = "The owner of this to do has prevented delegation. Please select a different action."
		Case ERR_NO_PROPOSE
			GetString = "The owner of this to do has prevented proposals. Please select a different action."
		Case Else
			GetString = BaseEventParticipantStringTable..GetString(nIndex, vData)
		End Select
	End Function
End Class

Const TOOL_STRING = 400
Const MEMO_STRING = 500
Const TRACKING_STRING = 700

Class MessageTrackStringTable
	Function GetString(nIndex As Integer, vData As Variant) As String
		Select Case nIndex
		Case TRACKING_STRING+1
			GetString = "UNKNOWN "
		Case TRACKING_STRING+2
			GetString = "In Queue "
		Case TRACKING_STRING+4
			GetString = "DELIVERED "
		Case TRACKING_STRING+8
			GetString = "DELIVERY FAILED "
		Case TRACKING_STRING+16
			GetString = "TRANSFERED "
		Case TRACKING_STRING+32 
			GetString = "TRANSER FAILED "
		Case  TRACKING_STRING+64
			GetString = "GROUP EXPANDED "
		Case  TRACKING_STRING+65
			GetString = "Message Tracking"	
		Case  TRACKING_STRING+66
			GetString = "Please select recipient(s) to track."
		Case  TRACKING_STRING+67
			GetString = "You may only track messages that you have sent."
		Case  TRACKING_STRING+68
			GetString = "No recipient(s) were selected"
		Case TRACKING_STRING+69
			GetString = "No valid recipients could be located to track."			
		End Select
	End Function		
End Class

Class MailToolsStringTable
	Function GetString (nIndex As Integer, vData As Variant) As String
		Select Case nIndex
		Case TOOL_STRING
			GetString = "Unable to locate your Name & Address Book.  Names not added."
		Case TOOL_STRING+1
			GetString = Str(vData) + " name(s) processed."
		Case TOOL_STRING+2
			GetString = Str(vData) + " name(s) added to your personal address book."
		Case TOOL_STRING+3
			GetString = Str(vData) + " name(s) not added; already in your personal address book."
		Case TOOL_STRING+4
			GetString = "Error adding name(s) to personal address book: " + Str(vData)
		Case TOOL_STRING+10
			GetString = "Unable to create a calendar entry for your time off."
		Case TOOL_STRING+11
			GetString = "An Out of office document has been added to your Calendar."
		Case TOOL_STRING+12
			GetString = "Would you like to create an Out of Office Calender entry?"
		Case TOOL_STRING+13
			GetString =  "Welcome Back!  Please disable your Out of Office Agent.  To disable the agent, " & _
			"Open your Out of Office profile and select the 'Disable' button."  & Chr(13)_
			& "While you were out, the 'Out of Office' agent notified the following people of your absence." & Chr(13)
		Case TOOL_STRING+14
			GetString = "Welcome Back!  Please disable your Out of Office Agent.  To disable the agent, " & _
			"Open your Out of Office profile and select the 'Disable' button."  & Chr(13)  &_
			"While you were out, your Out of Office Agent did not notify anyone of your absence."
		Case TOOL_STRING+15
			GetString = "Welcome Back!"
		Case TOOL_STRING+16
			GetString = "This is a repeat reminder! Please disable your Out of Office Agent.  To disable the agent, " & _
			"Open your Out of Office profile and select the 'Enable/Disable' button."
		Case TOOL_STRING+17
			GetString = "Out of Office Profile ERROR"
		Case TOOL_STRING+18
			GetString = "ERROR: You must create an Out of Office profile BEFORE running your Out of Office Agent."
		Case TOOL_STRING+19
			GetString = "ERROR: You must enable your Out of Office profile BEFORE running your Out of Office Agent."
		Case TOOL_STRING+31
			GetString = " can already read mail."
		Case TOOL_STRING+32
			GetString = " can already send mail."
		Case TOOL_STRING+33
			GetString = " can already edit documents."
		Case TOOL_STRING+34
			GetString = " can already manage the calendar."
		Case TOOL_STRING+37
			GetString = vData & Chr(13) & "Managers and Designers cannot be modified using the Delegation Profile."
		Case TOOL_STRING+38
			GetString =   "You must add " & Str(vData) & " to either the ""Read and send"" or the ""Read, send, and edit"" list before adding them to the ""Delete"" list."
		Case TOOL_STRING+39
			GetString =   "You must add " & Str(vData) & " to either the ""Read and send"" or the ""Read, send, and edit"" list before adding them to the ""Delete"" list."
		Case TOOL_STRING+40
			GetString =   Str(vData) & " is currently a Manager of this database." 
		Case TOOL_STRING+41
			GetString = Str(vData) & " is currently a Designer of this database. "
		Case TOOL_STRING+42
			GetString = "You do not have the privilege to change the ACL settings in this database."
		Case TOOL_STRING+43
			GetString = "Reminder Please Turn Off your Out Of Office Agent"
		Case TOOL_STRING+44			
			GetString = "Your Out of Office agent is still enabled."			
		Case TOOL_STRING+45
			GetString = "Please ask a Manager or Designer of this database to disable the agent for you."
		Case TOOL_STRING+46
			GetString = "Lotus Notes Out of Office"
		Case TOOL_STRING+47
			GetString = "Your 'Out of Office' agent is currently enabled."
		Case TOOL_STRING+48
			GetString = "Do you want to disable it ?"
		Case TOOL_STRING+49
			GetString = "Your Out of Office has been disabled."
		Case TOOL_STRING+50
			GetString = "Please ask a Manager or Designer of this database to enable the agent for you."
		Case TOOL_STRING+51
			GetString = "Your current location doesn't have a 'Mail Server' specified."'
		Case TOOL_STRING+52
			GetString = "Please edit your current record and specify your Mail Server."
		Case TOOL_STRING+53
			GetString = "The Out of Office agent is now enabled to run on the following server: "			
		Case TOOL_STRING+54
			GetString = "When people send you mail between "
		Case TOOL_STRING+55
			GetString = " and " &  vData & " it will inform them of your absence."
		Case TOOL_STRING+56
			GetString = "The Out of Office agent was not enabled."
		Case TOOL_STRING+57
			GetString = "You must indicate when you are leaving and when you will be back."
		Case TOOL_STRING+58
			GetString = "Your return date must be after today's date."
		Case TOOL_STRING+59
			GetString = "Your return date cannot be earlier than the leave date."
		Case TOOL_STRING+60
			GetString = "Your return date must be after your leave date."
		Case TOOL_STRING+61
			GetString = "Preferences"
		Case TOOL_STRING+62
			GetString = "Add sender to address book"
		Case TOOL_STRING+63
			GetString = "A contact with your name should not be added to your address book."
		Case TOOL_STRING+64
			GetString = Cstr(vData) & " conflicts"
		Case TOOL_STRING+65
			GetString = "Are you sure you wish to exit without enabling your Out of Office agent?"
		Case TOOL_STRING+66
			GetString = "Do you wish to disable 'Busy Time' for your 'Out of Office' calendar entry?"
		Case TOOL_STRING+67
			GetString = "Unable to disable 'Busy Time' for your 'Out of Office' calendar entry." & Chr(13) & "Entry not found."
		Case TOOL_STRING+68
			GetString = "Only the Owner or a Manager may modify the value of 'Owner'"
		Case TOOL_STRING+69
			GetString = "Your name cannot be found in the ACL, please contact your administrator."
		Case TOOL_STRING+70
			GetString = "You do not have sufficient rights to edit preferences for this database"
		Case TOOL_STRING+71
			GetString = "The 'Owner' of a mail file should be specified in 'Hierarchical' format." & Chr(13) &  "i.e. John Doe/MyDomain"			
		Case TOOL_STRING+72
			GetString = "Error creating AdminP request, please contact your administrator"			
		Case TOOL_STRING+73
			GetString = "No valid documents were selected, 'From' field is required"			
		End Select
	End Function
End Class

Class MemoStringTable
	
	Function GetString(nIndex As Integer, vData As Variant) As String
		Select Case nIndex
		Case MEMO_STRING   ' task notification mail message
			GetString = "Notification has been sent to "
		Case MEMO_STRING+1   ' name a stationery document
			GetString = "What would you like to call this stationery?"
		Case MEMO_STRING+2
			GetString = "This action cannot be performed on a new document."
		Case MEMO_STRING+3
			GetString = "Please select one document before executing this command."
		Case MEMO_STRING+4   ' user trying to copy a document that has the prevent copy bit set
			GetString = "This document is prevented from being copied.  The body will not be copied into the new document."              
		Case MEMO_STRING+5
			GetString = "Mail Schedule Profile not found.  You must define your Mail schedule profile before you can schedule a document."
		Case MEMO_STRING+6
			GetString = "Your Mail Scheduler agent is currently disabled.  The agent must be enabled before you can schedule a document."
		Case MEMO_STRING+7
			GetString = "Unable to locate your mail schedule profile.  A mail schedule profile must exist in your database before you can schedule a document."
		Case MEMO_STRING+8
			GetString = "Your Mail scheduling profile is not configured to run the Notes mail scheduler.  You must set the current status to enabled in order to schedule a document."
		Case MEMO_STRING+9
			GetString = Str(vData) & " document(s) processed."
		Case MEMO_STRING+10
			GetString = "The document(s) can be referenced via your Drafts view."
		Case MEMO_STRING+11
			GetString = Str(vData) & " document(s) put on hold."
		Case MEMO_STRING+12
			GetString = Str(vData) & " document(s) scheduled."
		Case MEMO_STRING+13
			GetString = Str(vData) & " document(s) no longer accessible from this view."
		Case MEMO_STRING+14
			GetString = "No Mail Schedule Profile"
		Case MEMO_STRING+15
			GetString = "You must enter a 'SendTo' name in order to schedule a document."
		Case MEMO_STRING+16
			GetString = "Lotus Notes"
		Case MEMO_STRING+17
			GetString = "-Untitled-"			
		Case MEMO_STRING+18
			GetString = "Include Signature"
		Case MEMO_STRING+19
			GetString = "Please place the cursor at the desired insertion point of the body field."
		Case MEMO_STRING+20
			GetString = "Do you wish to save this document?"
		Case MEMO_STRING+21
			GetString = "Address recipients"
		Case MEMO_STRING+22
			GetString = "Do you wish to save this new stationery?"
		Case MEMO_STRING+23
			GetString = "Do you wish to save this new message?"
		End Select
	End Function
End Class

Class CopyFactory
	'**This is a method for creating new copy objects
	'** It ensures that all documents will be mapped to their correct
	'** copy object
	Function createFromExisting( note As NotesDocument) As BaseNoteCopy
		If Not note Is Nothing Then
			Select Case Lcase( note.GetItemValue( "Form")(0))
			Case "memo","reply"
				Set createFromExisting = New MemoCopy( note)
			Case "appointment"
				Set createFromExisting = New CalendarCopy( note)
			Case "task"
				Set createFromExisting = New TaskCopy( note)
			Case "(groupcalendar)"
				Set createFromExisting = New GroupCalendarCopy( note)
			Case Else
				Set createFromExisting = New BaseNoteCopy( note)
			End Select
		Else
			Set createFromExisting = New BaseNoteCopy( Nothing)
		End If
	End Function
	
	Function createNew( nType As Integer) As BaseNoteCopy
		Select Case nType
		Case CREATE_MEMO
			Set createNew = New MemoCopy( Nothing)
		Case CREATE_CALENDAR
			Set createNew = New CalendarCopy( Nothing)
		Case CREATE_TASK
			Set createNew = New TaskCopy( Nothing)
		Case CREATE_GROUPCALENDAR
			Set createNew = New GroupCalendarCopy( Nothing)
		End Select
	End Function
End Class

Class BaseNoteCopy
	'**This class defines an interface for copying items from one document to another
	Private m_session As NotesSession
	Private m_db As NotesDatabase
	Private m_note As NotesDocument
	Public copyIntoAsLink As Integer
	Private m_maps List As Variant
	
	Sub new (note As NotesDocument)
		Set m_note = note
		If m_note Is Nothing Then
			Set m_session = New NotesSession
			Set m_db = m_session.currentDatabase
			Set m_note = m_db.createDocument
			Call setNewNoteInfo
		Else
			Set m_db = m_note.parentDatabase
			Set m_session = m_db.parent
		End If
		
		Dim tempMaps As Variant
		tempMaps = Evaluate( |@Explode("| & ItemMapsStr & |"; ";")| )
		Forall aMapStr In tempMaps
			Dim tempArray As Variant
			tempArray = Evaluate( |@Explode("| & aMapStr & |"; "||")| )
			Forall x In tempArray
				m_maps( x) = tempArray
			End Forall
		End Forall
		
	End Sub
	
	Public Property Get document As NotesDocument
		Set document = m_note 
	End Property
	
	Private Sub setNewNoteInfo
		'This method is used to write information
		'to the document if it's new.
		'It is meant to be overridden and used to set items such as form
		m_note.replaceItemValue"Principal", CSGetMailFileOwner()
		Call m_note.replaceitemvalue("tmpNewDoc","1")
	End Sub
	
	Public Function getBodyItem As NotesRichTextItem
		'This will get the body item.  If the body item in not richtext
		'then it converts in into richtext
		
		Dim body As NotesItem
		Dim rtBody As NotesRichTextItem
		
		If m_note.hasItem( "Body") Then
			Set body = m_note.getFirstItem( "Body")
			If body.type = RICHTEXT Then
				Set getBodyItem = body
			Else
				Dim tempStr As String
				tempStr = body.text
				body.remove
				Set rtBody = New NotesRichTextItem( m_note, "Body")
				rtBody.appendText( tempStr)
				
				Set getBodyItem = rtBody
			End If
		Else
			Set getBodyItem = New NotesRichTextItem( m_note, "Body")
		End If
	End Function
	
	Public Sub copyIntoBody( noteToCopy As BaseNoteCopy)
		Dim body As NotesRichTextItem
		Set body = Me.getBodyItem
		
		If copyIntoAsLink Then 
			If Not noteToCopy.document.isNewNote Then	Call body.AppendDocLink(noteToCopy.document,"")
		Elseif Not noteToCopy.document.getItemValue( "$KeepPrivate")(0) = "1" And noteToCopy.document.hasItem( "Body") Then		
			body.AddNewLine 2
			body.AppendText "__________________"
			body.AddNewLine 2
			body.appendRTItem noteToCopy.getBodyItem
		End If
	End Sub
	
	Function element0( x As Variant) As String
		element0= x(0)
	End Function
	
	Public Function copyIntoMe( ToCopy As BaseNoteCopy)
		Dim noteToCopy As NotesDocument
		Set noteToCopy = ToCopy.document
		
		copyIntoBody ToCopy		
		copyOtherStuff ToCopy
		
		Forall copyMap In ToCopy.m_maps 
			If Iselement( m_maps(Listtag(copyMap) )) Then
				If noteToCopy.hasItem( Listtag(copyMap)) Then
					copyItem noteToCopy.getFirstItem(Listtag(copyMap)), element0(m_maps(Listtag(copyMap)))
				End If 
			End If
		End Forall
		
		postCopyProcessing ToCopy
	End Function
	
	Private Sub copyItem( item As NotesItem, itemName As String)		
		If Not item Is Nothing Then
			If m_note.hasItem( itemName ) Then
				m_note.removeItem itemName
			End If
			m_note.copyItem item, itemName 
		End If
	End Sub
	
	Private Sub copyOtherStuff( toCopy As BaseNoteCopy)
		'**this is used to copy special case items.  meant to be overidden
	End Sub
	
	Private Sub postCopyProcessing( toCopy As BaseNoteCopy)
		'**this is used to process the document after all the copying is done.  meant to be overidden
	End Sub
	
	Property Get ItemMapsStr As String
		ItemMapsStr = "Subject|Topic;SendTo|RequiredAttendees|AssignedTo;CopyTo|OptionalAttendees|OptionalAssignees;BlindCopyTo|FYIAttendees|FYIAssignees"
	End Property
	
End Class

Class MemoCopy As BaseNoteCopy
	Sub new (note As NotesDocument), BaseNoteCopy( note)
	End Sub
	
	Private Sub setNewNoteInfo
		BaseNoteCopy..setNewNoteInfo
		m_note.replaceItemValue "Form", "Memo"
		m_note.ReplaceItemValue "Logo", m_session.currentdatabase.getprofiledocument("CalendarProfile").GetItemValue("DefaultLogo")(0)
	End Sub	
	
	Property Get ItemMapsStr As String
		ItemMapsStr = BaseNoteCopy..ItemMapsStr & ";AltSendTo;AltCopyTo;AltBlindCopyTo;iSendTo;iCopyTo;iBlindCopyTo;$StorageTo;$StorageCc;$StorageBcc;$NameLanguageTags"
	End Property	
	
End Class

Class CalendarCopy As BaseNoteCopy
	Private m_strOriginalPrincipal As String	
	
	Sub new (note As NotesDocument), BaseNoteCopy( note)
		
	End Sub
	
	Private Sub setNewNoteInfo
		BaseNoteCopy..setNewNoteInfo
		m_note.replaceItemValue "Form", "Appointment"		
	End Sub
	
	Public Function copyIntoMe( ToCopy As BaseNoteCopy)
		m_strOriginalPrincipal = ToCopy.m_note.GetItemValue("Principal")(0)		
		Call BaseNoteCopy..copyIntoMe( ToCopy )
	End Function
	
	Property Get ItemMapsStr As String
		ItemMapsStr = BaseNoteCopy..ItemMapsStr & ";StartDate;StartDateTime;StartTime;EndDate;EndDateTime" &_
		";EndTime;Resources;RoomsToReserve;AppointmentType;CalendarDateTime;RoomToReserve;OrgConfidential;BookFreeTime;Categories;Location" &_
		";Alarms;$Alarm;$AlarmDescription;$AlarmOffset;$AlarmSound;$AlarmUnit"
	End Property
	
	Private Sub postCopyProcessing( toCopy As BaseNoteCopy)
		Dim strOwner As String
		Dim vModifiedSendTo As Variant
		strOwner = m_session.UserName
		vModifiedSendTo = Arrayappend(m_note.GetItemValue("SendTo"),m_strOriginalPrincipal)
		Call m_note.ReplaceItemValue("SendTo",RemoveItemFromArray(vModifiedSendTo,strOwner))
		Call m_note.ReplaceItemValue("CopyTo",RemoveItemFromArray(m_note.GetItemValue("CopyTo"),strOwner))
		Call m_note.ReplaceItemValue("BlindCopyTo",RemoveItemFromArray(m_note.GetItemValue("BlindCopyTo"),strOwner))
	End Sub
	
	Private Function RemoveItemFromArray(vArray As Variant,strItem As String) As Variant
		Dim nIndex As Integer
		nIndex = NAMEFindInList(strItem, vArray)	
		If (nIndex >= 0) Then
			vArray(nIndex) = ""
		End If				
		RemoveItemFromArray = vArray
	End Function
	
End Class

Class TaskCopy As BaseNoteCopy
	Sub new (note As NotesDocument), BaseNoteCopy( note)		
	End Sub
	
	Private Sub setNewNoteInfo
		BaseNoteCopy..setNewNoteInfo
		m_note.replaceItemValue "Form", "Task"
	End Sub
	
	Property Get ItemMapsStr As String
		ItemMapsStr = BaseNoteCopy..ItemMapsStr & ";StartDate;StartDateTime;StartTime;DueDate;DueDateTime"
	End Property
	
	Private Sub postCopyProcessing( toCopy As BaseNoteCopy)
		If Len( m_note.getItemValue( "SendTo")(0)) > 0 Then Call m_note.replaceItemValue( "TaskType", "2")
	End Sub
End Class

Class GroupCalendarCopy As BaseNoteCopy
	Sub new (note As NotesDocument), BaseNoteCopy( note)		
	End Sub
	
	Private Sub setNewNoteInfo 
		m_note.replaceItemValue "Form", "(GroupCalendar)"
	End Sub
	
	Property Get ItemMapsStr As String
		ItemMapsStr = "Members|SendTo;Subject"
	End Property
	
	Private Sub postCopyProcessing(toCopy As BaseNoteCopy)
		Dim NoteToCopy As NotesDocument
		Set noteToCopy = toCopy.m_note	
		m_note.replaceItemValue "Members", Arrayappend( Arrayappend( m_note.getItemValue( "Members"), noteToCopy.getItemValue( "CopyTo")), noteToCopy.getItemValue( "BlindCopyTo"))
		Evaluate |Field Members := @Unique( @Trim( Members));""|, m_note 
	End Sub
	
	Public Sub copyIntoBody( noteToCopy As BaseNoteCopy) 
		'Don't ever copy the body
	End Sub
End Class











'++LotusScript Development Environment:2:2:NAMEGetComponents:1:8
Sub NAMEGetComponents(sUserName As String,sRetAbbreviatedName As String,sRetDomain As String)
	
	Dim nameUser As NotesName
	Set nameUser = New NotesName(sUsername) 
	If Instr(sUserName,"@") Then
		sRetAbbreviatedName = Strleft(nameUser.abbreviated,"@")
		sRetDomain = Strright(nameUser.abbreviated,"@")
	Else
		sRetAbbreviatedName = nameUser.abbreviated
		sRetDomain = ""
	End If
End Sub
'++LotusScript Development Environment:2:1:NAMECompare:1:8
Function NAMECompare(sName1 As String, sName2 As String) As Integer
%REM
	Returns true if two names are equal, False otherwise

%END REM
	Dim sCanName1 As String
	Dim sDomainName1 As String
	Dim sCanName2 As String
	Dim sDomainName2 As String
	Dim nLenName1 As Integer
	Dim nLenName2 As Integer
	
	Dim name1 As NotesName
	Dim name2 As NotesName
	
	Call NAMEGetComponents(sName1, sCanName1, sDomainName1)
	Call NAMEGetComponents(sName2, sCanName2, sDomainName2)
	
	Set name1 = New NotesName(sCanName1)
	Set name2 = New NotesName(sCanName2)
	
	' Do a canonical comparison if both names are hierarchical
	If (name1.IsHierarchical) And (name2.IsHierarchical) Then	
		If (Strcompare(sCanName1, sCanName2, 1) = 0) Then
			NAMECompare = True
			Exit Function
		Else
			Exit Function		
		End If
	End If
	
     ' Compare the common names
	If (Strcompare(name1.common, name2.common, 1) = 0) Then
		NAMECompare = True
		Exit Function
	End If
	
	NAMECompare = False
End Function
'++LotusScript Development Environment:2:1:NAMEFindInList:1:8
Function NAMEFindInList(sKeyName As String, vListOfNames As Variant) As Integer
%REM
	Given a name and a list of names return the index position if the user is found, -1 otherwise
%END REM 
	Dim x As Integer
	Dim iNames As Integer
	
	NAMEFindInList = -1
	
	If Isempty(vListOfNames) Then
		Exit Function
	End If
	
	If Isarray(vListOfNames) Then
		iNames = Ubound(vListOfNames)
		For x = 0 To iNames
			If (NAMECompare(sKeyName,Cstr(vListOfNames(x)))) Then
				NAMEFindInList = x
				Exit Function
			End If
		Next
	Else
		If (NAMECompare(sKeyName, Cstr(vListOfNames))) Then
			NameFindInList = 0
		End If		
	End If
End Function
'++LotusScript Development Environment:2:1:NAMECompareWildcards:1:8
Function NAMECompareWildcards(Byval sName As String,sWildcard As String) As Integer
%REM
allowable wildcard formats

*/O
*/OU/O
*/OU/OU/O
*/OU/OU/OU/O
%END REM
	Dim name1 As NotesName
	Dim name2 As NotesName
	Dim nWIldcardUnits As Integer
	Dim nNameUnits As Integer
	Dim nPos As Integer
	
	NAMECompareWildcards = False
	
	If Left$(sWildcard,1) <> "*" Then
		Exit Function          
	End If
	
	Set name1 = New NotesName(sName)
	Set name2 = New NotesName(sWildcard)
	
     ' first, determine how many "/" are in the wildcard and in name
	nWildcardUnits = NAMEGetNumOrgUnits(sWildcard)
	nNameUnits = NAMEGetNumOrgUnits(sName)
	
     ' if there are more "/" in widlcard, the names can't possibly match     
	If (nWildcardUnits > nNameUnits) Then
		Exit Function          
	End If
	
     ' Now that we validated the # of arguments, assume the names will match
     ' We do it this way so that if any particular comparison fails, we set to false and exit
     ' In addition, if nWildcard units = 0, then the wildcard must be "*", so everything matches
	
	NAMECompareWildcards = True
	
	If (nWildcardUnits > 0) Then
      ' First, compare the Organization
		If Not(Strcompare(name1.organization, name2.organization,1) = 0) Then
			NAMECompareWildcards = False               
			Exit Function                    
		End If
	End If
	
	If (nWildcardUnits > 1) Then
      ' compare the OU1
		If Not(Strcompare(name1.Orgunit1, name2.orgunit1,1)=0) Then
			NAMECompareWildcards = False               
			Exit Function                    
		End If
	End If
	
	If (nWildcardUnits > 2) Then
      ' compare the OU2
		If Not(Strcompare(name1.Orgunit2, name2.orgunit2,1)=0) Then
			NAMECompareWildcards = False               
			Exit Function                    
		End If
	End If
	
	If (nWildcardUnits > 3) Then
      ' compare the OU3
		If Not(Strcompare(name1.Orgunit3, name2.orgunit3,1)=0) Then
			NAMECompareWildcards = False               
			Exit Function                    
		End If
	End If
	
	If (nWildcardUnits > 4) Then
      ' compare the OU4
		If Not(Strcompare(name1.Orgunit4, name2.orgunit4,1)=0) Then
			NAMECompareWildcards = False               
			Exit Function                    
		End If
	End If
	
   ' if we made it this far, the name matches the wildcard
End Function
'++LotusScript Development Environment:2:1:NAMEGetNumOrgUnits:1:8
Function NAMEGetNumOrgUnits(sName) As Integer
	Dim nPos As Integer
	Dim nUnits As Integer
	nPos = Instr(sName,"/")
	While (nPos > 0)
		nUnits = nUnits + 1
		sName = Right$(sName,Len(sName)-nPos)
		nPos = Instr(sName,"/")          
	Wend
	NAMEGetNumOrgUnits = nUnits
End Function
'++LotusScript Development Environment:2:2:TIMEGetFromItem:1:8
Sub TIMEGetFromItem(sItemName As String, note As NotesDocument, dt1 As NotesDateTime) 
	Dim item As NotesItem
	
	
	' If the user passed in an existing allocated object, delete it
	If Not(dt1 Is Nothing) Then
		Delete dt1
	End If
	
	If Not(TIMEValidateArgs(sItemName, "", note)) Then
		Exit Sub
	End If
	
	Set item = note.GetFirstItem(sItemName)
	
	If (Len(item.text) = 0) Then 
		Exit Sub
	End If
	
	Set dt1 = New NotesDateTime("")
	Set dt1 = item.DateTimeValue
End Sub
'++LotusScript Development Environment:2:1:TIMECompareDates:1:8
Function TIMECompareDates(dt1 As NotesDateTime, dt2 As NotesDateTime) As Integer
	
	Dim dtMy1 As NotesDateTime
	Dim dtMy2 As NotesDateTime
	
	TIMECompareDates = 0
	
	If (dt1 Is Nothing) Or (dt2 Is Nothing) Then
		Exit Function
	End If
	
	Set dtMy1 = New NotesDateTime(dt1.DateOnly)
	Set dtMy2 = New NotesDateTime(dt2.DateOnly)
	
	TIMECompareDates = dtMy1.TimeDifference(dtMy2)/86400
End Function
'++LotusScript Development Environment:2:2:TIMEGetNotesFromLS:1:8
Sub TIMEGetNotesFromLS(vLS As Variant, dtNotes As NotesDateTime)
	Set dtNotes = New NotesDateTime("")
	
	If Isdate(vLS) Then dtNotes.LSLocalTime = vLS
End Sub
'++LotusScript Development Environment:2:1:TIMEValidateArgs:1:8
Function TIMEValidateArgs(sItemname1 As String, sItemName2 As String, note As NotesDocument) As Integer
	
	TIMEValidateArgs = False
	If (note Is Nothing) Then
		Exit Function
	End If
	
	If (Len(sItemname1) > 0) Then
		If Not(note.HasItem(sItemName1)) Then
			Exit Function
		End If
	End If
	
	If (Len(sItemname2) > 0) Then
		If Not(note.HasItem(sItemName2)) Then
			Exit Function
		End If
	End If
	TIMEValidateArgs = True
End Function
'++LotusScript Development Environment:2:1:CSGetMailFileOwner:1:8
Function CSGetMailFileOwner() As String
	Dim session As New notessession
	Dim profile As notesdocument
	Dim strOwner As String
	
	Set profile = session.currentdatabase.getprofiledocument("CalendarProfile")
	
	strOwner = profile.GetItemValue("Owner")(0)
	
	If Len(strOwner) Then
		CSGetMailFileOwner = strOwner
	Else
		CSGetMailFileOwner = session.UserName
	End If
End Function
'++LotusScript Development Environment:2:2:TIMEGetComponents:1:8
Sub TIMEGetComponents(sDateItem As String, sTimeItem As String, note As NotesDocument, dt1 As NotesDateTime)
	Dim itemST As NotesItem
	Dim itemSD As NotesItem
	
	
	' If the user passed in an existing allocated object, delete it
	If Not(dt1 Is Nothing) Then
		Delete dt1
	End If
	
	If Not(TIMEValidateArgs(sDateItem, sTimeItem, note)) Then
		Exit Sub
	End If
	
	Set itemSD = note.GetFirstItem(sDateItem)
	Set itemST = note.GetFirstItem(sTimeItem)
	
	Set dt1 = New NotesDateTime(itemSD.DateTimeValue.DateOnly & " " & itemST.DateTimeValue.TimeOnly)    
End Sub
'++LotusScript Development Environment:2:1:NOTEUserIsCreator:1:8
Function NOTEUserIsCreator(note As NotesDocument) As Integer
	Dim strMailOwner As String
	Dim strFrom As String
	Dim session As New NotesSession
	
	NOTEUserIsCreator = True
	
	' By default, all new documents are creators
	If (note Is Nothing) Then
		Exit Function
	End If
	
	If (note.IsNewNote) Then 
		Exit Function
	End If
	
	strMailOwner = CSGetMailFileOwner()
	
	If (note.HasItem("Chair")) Then
		strFrom = note.getitemvalue("Chair")(0)
	Elseif (note.HasItem("Principal")) Then
		strFrom = note.getitemvalue("Principal")(0)
	Elseif (note.hasItem("From")) Then
		strFrom = note.getitemvalue("From")(0)
	Else
		strFrom = session.UserName
	End If
	
	If Len(strFrom) = 0 Then strFrom = session.UserName
	
	NOTEUserIsCreator = NAMECompare(strMailOwner, strFrom)	
End Function
'++LotusScript Development Environment:2:1:NAMEExistsInList:1:8
Function NAMEExistsInList(sKeyName As String, vLIstOfNames As Variant) As Integer
%REM
	Given a name and a list of names return True if sKeyName exists in vListOfNames
		false if they are not
%END REM 
	NAMEExistsInList = False
	
	NAMEExistsInList = (NAMEFindInList(sKeyName, vListOfNames) >= 0)
End Function
'++LotusScript Development Environment:2:1:NOTECopyIntoNewDocument:1:8
Function NOTECopyIntoNewDocument(Byval iNewType As Integer, Byval iFlags As Integer, note As NotesDocument, strnewform As String) As NotesDocument
	Dim copyInto As BaseNoteCopy
	Dim copyFactory As New CopyFactory
	
	Set copyInto = copyFactory.createNew( iNewType)
	copyInto.copyIntoAsLink = iFlags
	
	copyInto.copyIntoMe copyFactory.createFromExisting( note)
	If Len( strNewForm) >0 Then
		copyInto.document.replaceItemValue "Form", strnewForm
	End If
	Set NOTECopyIntoNewDocument = copyInto.document
End Function
'++LotusScript Development Environment:2:1:YesNoPrompt:1:8
Function YesNoPrompt(sPrompt As String, sTitle As String) As Integer
	Dim nResult As Integer         
	nResult = Messagebox(sPrompt, MB_YESNO + MB_ICONQUESTION, sTitle)
	YesNoPrompt = (nResult = IDYES)
End Function
'++LotusScript Development Environment:2:1:YesNoCancelPrompt:1:8
Function YesNoCancelPrompt(sPrompt As String, sTitle As String) As Integer
	YesNoCancelPrompt = Messagebox(sPrompt, MB_YESNOCANCEL+MB_ICONQUESTION , sTitle)
End Function
'++LotusScript Development Environment:2:1:DisplayWarn:1:8
Function DisplayWarn(sError As String, nPrompt As Integer, sTitle As String) As Integer
	DisplayWarn = Messagebox (sError, nPrompt+MB_ICONEXCLAMATION, sTitle)
End Function
'++LotusScript Development Environment:2:2:TIMEAdjustByDifference:1:8
Sub TIMEAdjustByDifference(Byval lDifference As Long, dtAdjust As NotesDateTime)
	Dim iSeconds As Integer
	Dim iMinutes As Integer
	Dim iHours As Integer
	Dim iDays As Integer
	
	If (Abs(lDifference) >= 86400) Then
		iDays = lDifference / 86400
		lDifference = lDifference Mod 86400
	End If
	
	If (Abs(lDifference) >= 3600) Then
		iHours = lDifference / 3600
		lDifference = lDifference Mod 3600
	End If
	
	If (Abs(lDifference) >= 60) Then
		iMinutes = lDifference / 60
		lDifference = lDifference Mod 60
	End If
	
	iSeconds = lDifference
	
	If (iDays) Then Call dtAdjust.AdjustDay(iDays, True)
	If (iHours) Then Call dtAdjust.AdjustHour(iHours, True)	
	If (iMinutes) Then Call dtAdjust.AdjustMinute(iMinutes, True)
	If (iSeconds) Then Call dtAdjust.AdjustSecond(iSeconds, True)
	
End Sub
'++LotusScript Development Environment:2:1:CSEventDTItemsModified:1:8
Function CSEventDTItemsModified(vBEObject As Variant) As Integer
%REM
	Determines if either one of the date/time values of
	a cs object were modified
%ENDREM	
	
	If (vBEobject.OriginalEndDate.TimeDifference(vBEObject.CurrentEndDate) <> 0) Then
		CSEventDTItemsModified = True
		Exit Function
	End If
	
	If (vBEobject.OriginalStartDate.TimeDifference(vBEObject.CurrentStartDate) <> 0) Then
		CSEventDTItemsModified = True
		Exit Function
	End If
	
	CSEventDTItemsModified = False
End Function
'++LotusScript Development Environment:2:1:CSEventNeedsReschedule:1:8
Function CSEventNeedsReschedule(vBEObject As Variant) As Integer
	Dim dtCurrentEnd As NotesDateTime
	Dim dtCurrentStart As NotesDateTime
	
	CSEventNeedsReschedule = False
	
	' if the document was never mailed, no need to reschedule it
	If Not(vBEobject.WasMailed) Then
		Exit Function
	End If
	
	Set dtCurrentEnd = vBEObject.CurrentEndDate
	If (vBEObject.OriginalEndDate.TimeDifference(dtCurrentEnd) <> 0) Then
		CSEventNeedsReschedule = True
		Exit Function
	End If
	
		' If there are no invitees, we do not need to reschedule		
	If vBEObject.WasMailed Then
		Set dtCurrentStart = vBEObject.CurrentStartDate
		If (vBEObject.OriginalStartDate.TimeDifference(dtCurrentStart) <> 0) Then
			CSEventNeedsReschedule = True
		End If
	End If
End Function
'++LotusScript Development Environment:2:2:CSDocOpen:1:8
Sub CSDocOpen(vBEObject As Variant, note As NotesDocument, dtCalInstance As NotesDateTime, Byval dOptions As Long)
%REM
	Provides all backend processing for opening a cs document
%ENDREM	
	Dim dInitFlags As Long
	Dim bInitDates As Integer
	
	If Not(dtCalInstance Is Nothing) Then Set vBEObject.CalendarInstance = dtCalInstance
	
	' If we do not have a note, bail now
	If (note Is Nothing) Then Exit Sub
	
	If (dOptions And CS_DOC_WEBUSER) = CS_DOC_WEBUSER Then 
		dInitFlags = 8
		If (dOptions And CS_DOC_FIRSTPASS) = 0 Then dInitFlags = dInitFlags Or 16
	End If
	
	On Error Resume Next	
	Call vBEobject.Init(note, dInitFlags)
	On Error Goto errorroutine
	
	' See if this is a new document
	If (note.IsNewNote) Then
		If Not((note.getitemvalue("WebDateTimeInit")(0)="1")) Then
			Call note.replaceitemvalue("WebDateTimeInit", "1")
			bInitDates = True
		End If
		If (note.getitemvalue(vBEOBject.EndItemName)(0) = "") Then 
			bInitDates = True
		Else
			bInitDates = False
		End If
		
		If (bInitDates = True) Then Call vBEObject.InitDateTimeItems(vBEObject.CalendarInstance)	
		
		If (dOptions And CS_DOC_ALARMS) Then Call vBEObject.SetDefaultAlarm()
	End If
	
	
	Call note.removeitem("tmpOwnerHW")
	Call note.removeitem("tmpNoActionBar")
	
	If (vBEObject.WasMailed) Then
		Call note.ReplaceItemValue("tmpWasMailed", "1")
	End If
	Exit Sub
ErrorRoutine:
	Msgbox "Error opening C&S Document -> " & Error$
	Exit Sub
End Sub
'++LotusScript Development Environment:2:2:CSDocSave:1:8
Sub CSDocSave(vBEObject As Variant, vCallBackObject As Variant, Byval dAction As Long, Byval dOptions As Long, vContinue As Variant)
	Dim note As notesDocument
	Dim vDates As Variant
	Dim strAction As String, strCurrentType As String, strOriginalType As String
	Dim bOwner As Integer, bCreateRepeat As Integer, nChangeWhich As Integer
	Dim iType As Integer
	
	Set note = vBEObject.Document
	bOwner = ((dOptions And CS_DOC_FOROWNER) = CS_DOC_FOROWNER)
	If ((dOptions And CS_DOC_TASK) = CS_DOC_TASK) Then
		iType = 2
	Elseif ((dOptions And CS_DOC_RESOURCE) = CS_DOC_RESOURCE) Then
		iType = 3
	Else
		iType = 1
	End If
	
	strAction=note.getitemvalue("tmpaction")(0)
	
	If Len(strAction) Then dAction = (dAction Or Clng(strAction))
	
	' Call the function that allows outside apps to do some pre-save stuff
	Call CSExtAppDocSave(note, dAction, iType, vContinue)
	
	' If the ext app does not want to continue, bail
	If Not(vContinue) Then Exit Sub
	
	strCurrentType = vBEObject.CurrentType
	strOriginalType = vBEObject.OriginalType
	
	' set the public access flag
	If (iType <> 3) Then
		If (note.GetItemValue("OrgConfidential")(0) = "1") Then
			Call note.removeitem("$PublicAccess")
		Else
			Call note.replaceitemvalue("$PublicAccess","1")
		End If
		
		If (dOptions And CS_DOC_ALARMS) Then
			If (note.HasItem("$Alarm") And Not(vbeobject.InAlarmFolder)) Then
				If Not(note.hasitem("$AlarmTime")) And Not(note.hasitem("$AlarmOffset")) Then
				' The user wants this entry to have an alarm by default				
					Call vbeobject.AddDefaultAlarm()
				End If
			End If
		End If
	End If
	
	' If this is a repeating instance, store off the original start date
	If (vBEObject.Context = CTX_REPEAT_INST) Then Call note.ReplaceitemValue("OriginalStartDate", vBEObject.OriginalStartDate)
	
	If (bOwner Or iType = 3) Then
		If (dOptions And CS_DOC_ISCOUNTER) = 0 Then
			If ((dOptions And CS_DOC_WEBUSER) > 0) Or (iType = 3) Then Call vBEObject.UpdateDateTimeItems()
			
			' Perform actions on calendar entries
			If (iType = 1) Then
				Call CSDocSaveCalendarEntry(vBEObject, bOwner, strCurrentType)
			Elseif (iType = 2) Then
				Call vBEObject.SetDueState
			End If
			
			' If we are rescheduling, update the sequence num
			If (dAction And ACTION_RESCHEDULE) Then Call vBEObject.IncrementSequenceNum()
			Call vBEObject.SetCalendarDateTime()
			Call vBEObject.SetViewIcon()
			
			If (note.HasItem("OrgRepeat") And Not(note.IsResponse)) Then
				If Not(note.HasItem("RepeatDates")) Then
					On Error Goto GenerateRepeatError
					vDates = vBEObject.GenerateRepeatDates()
					Call note.ReplaceItemValue("RepeatDates", vDates)
					bCreateRepeat = True
					On Error Resume Next
				End If
			End If
			
			Call vBEObject.UpdateBusyTimeInfo(note.GetItemValue("BookFreeTime")(0)  <> "1")
			
		' Check to see if we need to mail this thing
			If (dAction And ACTION_SEND) Then Call CSDocSendPrimaryNotice(vBEObject, vCallBackObject, vContinue)
			
			If (vContinue = False) Then 
				Call note.removeitem("RepeatDates")
				Exit Sub
			End If			
			
			If (bCreateRepeat) Then Call vBEObject.CreateRepeatHierarchy()
		End If	
	End If
	
	
	Call vBEObject.MarkTempItems	
	
	Exit Sub
	
GenerateRepeatError:
	If (dOptions And CS_DOC_WEBUSER) = 0 Then
		Dim strtable As New BaseCSStringTable()
		' warn the user that we cannot create this many instances
		Call DisplayWarn(strtable.getstring(ERR_CREATE_REPEAT, Null), 0, strtable.getstring(ERR_TITLE,Null))	
		vContinue = False
		Call note.removeitem("RepeatDates")		
	End If
	Exit Sub
End Sub	
'++LotusScript Development Environment:2:2:CSDocSaveCalendarEntry:1:8
Sub CSDocSaveCalendarEntry(vBEObject As Variant, bOwner As Integer, strCurrentType As String)
	Dim note As notesdocument
	Dim item As notesitem
	Dim nYearly As Integer
	
	Set note = vBEObject.Document
	
	If (strCurrentType = "1" And (note.IsNewNote = True)) Then
		' See if this should automatically repeat
		If Not(note.hasitem("OrgRepeat")) And Not(note.hasitem("tmpDoNotRepeat")) Then
			nYearly = CSProfileGetAutoAnnivRepeat()
			If (nYearly > 0) Then
				Set item = note.getfirstitem("StartDate")
				Call item.copyitemtodocument(note, "RepeatStartDate")
				Call note.replaceitemvalue("OrgRepeat","1")
				Call note.replaceitemvalue("RepeatHow", "F")
				Call note.replaceitemvalue("RepeatFor", nYearly)
				Call note.replaceitemvalue("RepeatForUnit","Y")
				Call note.replaceitemvalue("RepeatUnit","Y")
				Call note.replaceitemvalue("RepeatInterval", "1")
				Call note.replaceitemvalue("RepeatWeekends", "D")
			End If
		End If
	End If
End Sub
'++LotusScript Development Environment:2:2:CSDocSendPrimaryNotice:1:8
Sub CSDocSendPrimaryNotice(vBEObject As Variant, vCallBackObject As Variant, vContinue As Variant)
	Dim fSendOptions As Integer
	
	On Error Resume Next
	
	If Not(vBEObject.IsWorkflowEnabled) Then Exit Sub
	
	fSendOptions = vBEObject.PrimarySendOptions
	
	If (fSendOptions = 0) Then Exit Sub
	
	If ( (fSendOptions And 2) Or (fSendOptions And 4) ) Then Call vBEObject.InviteRooms()
	
	If (fSendOptions And 1) Then
	    ' first, prepare the backend document for sending
		Err = 0
		
		Call vBEObject.PreSendPrimaryRequest()
		
		' invoke the callback object
		Call vCallBackObject.SendPrimaryRequest()
		
		Call vBEObject.PostSendPrimaryRequest(Err <> 0)
		
	End If
	
	If (Err <> 0) Then vContinue = False
End Sub				
'++LotusScript Development Environment:2:2:CSDocUpdatePersonalCategories:1:8
Sub CSDocUpdatePersonalCategories(note As NotesDocument, profile As NotesDocument)
	Dim vCategories As Variant
	Dim vResult As Variant
	Dim nentries As Integer		
	Dim strSelectedCategory As String, strCoreCategories As String
	
	If (note Is Nothing) Or (profile Is Nothing) Then Exit Sub
	
	' See if we need to update categories		
	strSelectedCategory = note.GetItemValue("Categories")(0)
	
	If Len(strSelectedCategory) = 0 Then Exit Sub
	
	strCoreCategories = "HVPNCTPC"
	
	If Len(strSelectedCategory) <= 2 Then
		If Instr(strCoreCategories,strSelectedCategory) Then Exit Sub
	End If
	
	vCategories = profile.GetItemValue("UserCategories")		
	
	On Error Resume Next
	
	vResult = Arraygetindex(vCategories, strSelectedCategory)
	
	If Isnull(vResult) = True Then
		nEntries = Ubound(vCategories) + 1
		Redim Preserve vCategories(nEntries)
		vCategories(nEntries) = strSelectedCategory
		Call profile.replaceitemvalue("UserCategories", vCategories)
		Call profile.save(True, False)
	End If
End Sub	
'++LotusScript Development Environment:2:2:CSExtAppDocSave:1:8
Sub CSExtAppDocSave(note As notesdocument, Byval daction As Long, bIsTask As Integer, vContinue As Variant)
	
End Sub
'++LotusScript Development Environment:2:2:wInstantiateObjectVariables:1:8
Sub wInstantiateObjectVariables
	Set session = New NotesSession
	Set db = session.CurrentDatabase
	Set note = session.DocumentContext
	Set agentlog = New noteslog("Agent log")
	Call agentlog.openagentlog
End Sub
'++LotusScript Development Environment:2:2:wMessagePageHeader:1:8
Sub wMessagePageHeader
     'Create the action bar
	Evaluate("@ReplaceSubstring(""" + PathAndName$ + """;"" "";""+"")")
	Print |<TABLE BORDER CELLSPACING=2 CELLPADDING=2>| 
	Print |<TR VALIGN=middle BGCOLOR="C0C0C0">| 
	Print |<TD><A HREF="| & PathAndName$ & |($InBox)"><IMG BORDER=0 WIDTH=21 HEIGHT=21 SRC="/icons/actn110.gif"> In Box</A></TD>| 
	Print |<TD><A HREF="| & PathAndName$ & |($Calendar)?OpenView&Grid=| & profile.wCalGridType(0) & |"><IMG BORDER=0 WIDTH=21 HEIGHT=21 SRC="/icons/actn133.gif"> Calendar</A></TD>| 
	Print |<TD><A HREF="| & PathAndName$ & |($Meetings)"><IMG BORDER=0 WIDTH=21 HEIGHT=21 SRC="/icons/actn126.gif"> Meetings</A></TD>| 
	Print |<TD><A HREF="| & PathAndName$ & |($ToDo)"><IMG BORDER=0 WIDTH=21 HEIGHT=21 SRC="/icons/actn127.gif"> To Do</A></TD>| 
	Print |<TD><A HREF="| & PathAndName$ & |"><IMG BORDER=0 WIDTH=21 HEIGHT=21 SRC="/icons/actn120.gif"> All Views</A></TD>| 
	Print |</TR></TABLE><HR>|
End Sub
'++LotusScript Development Environment:2:2:CopyProfileValues:1:8
Sub CopyProfileValues(noteSrc As NotesDocument, noteDest As NotesDocument)
	Dim x As Integer
	Dim item As NotesItem
	Dim item2 As NotesITem
	
	
	noteDest.Owner = noteSrc.Owner(0)
	Call agentlog.logaction("owner is "+notesrc.owner(0))
	noteDest.DefaultDuration = noteSrc.DefaultDuration(0)
	noteDest.AutoAnniversaryRepeat = noteSrc.AutoAnniversaryRepeat(0)
	
	If (noteSrc.HasItem("AutoRemoveFromInbox")) Then 
		noteDest.AutoRemoveFromInbox = noteSrc.AutoRemoveFromInbox(0)
	Else
		noteDest.AutoRemoveFromInbox = "0"
	End If
	If (noteSrc.hasitem("FormatReplies")) Then
		noteDest.FormatReplies=noteSrc.FormatReplies(0)
	End If
	If(noteSrc.hasitem("OffsetChar")) Then
		noteDest.OffSetchar=noteSrc.Offsetchar(0)
	End If
	If (noteSrc.HasItem("PreventAll")) Then 
		noteDest.PreventAll = noteSrc.PreventAll(0)
	End If
	If (noteSrc.HasItem("PreventSent")) Then
		noteDest.PreventSent=noteSrc.PreventSent(0)
	End If
	If (noteSrc.Hasitem("ConflictEvent")) Then
		noteDest.ConflictEvent = noteSrc.ConflictEvent(0)
	End If
	If (noteSrc.Hasitem("ConflictMeeting")) Then
		noteDest.ConflictMeeting = noteSrc.ConflictMeeting(0)
	End If
	If (noteSrc.Hasitem("ConflictAnniversary")) Then
		noteDest.ConflictAnniversary = noteSrc.ConflictAnniversary(0)
	End If
	
	If (noteSrc.Hasitem("TaskFollow")) Then
		noteDest.TaskFollow = noteSrc.TaskFollow(0)
	End If
	If (noteSrc.hasitem("AutoProcessType")) Then
		noteDest.AutoProcessType=noteSrc.AutoProcessType(0)
		If (noteSrc.getitemvalue("AutoProcessType")(0)="2") Then
			'pull autoprocessuserlist
			Set item = noteSrc.getfirstitem("AutoProcessUserList")
			Call noteDest.removeitem("AutoProcessUserList")
			Call item.copyitemtodocument(noteDest, "AutoProcessUserList")
		End If
		If (noteSrc.getitemvalue("AutoProcessType")(0)="1") Then
			'pull forward
			Set item = noteSrc.getfirstitem("AutoProcessForward")
			Call noteDest.removeitem("AutoProcessForward")
			Call item.copyitemtodocument(noteDest, "AutoProcessForward")
		End If
	End If
	
	If (noteSrc.hasitem("PreventRepliesFromInbox")) Then
		noteDest.PreventRepliesFromInbox=noteSrc.PreventRepliesFromInbox(0)
	End If
	
	If (noteSrc.hasitem("AutoRemoveFromInbox")) Then
		noteDest.AutoRemoveFromInbox=noteSrc.AutoRemoveFromInbox(0)
	End If
	
	Set item = noteSrc.GetFirstItem("AllowBusyAccess")
	Call noteDest.RemoveItem("AllowBusyAccess")
	Set item2 = item.CopyItemToDocument(noteDest, "AllowBusyAccess")
	If Len(item2.text) Then 
		If Not(item2.Contains(noteSrc.GetItemValue("Owner")(0))) Then 
			Call item2.AppendToTextList(noteSrc.GetItemValue("Owner")(0))
		End If
	End If
	
	If(noteSrc.hasitem("ReadMail")) Then
		Set item = noteSrc.getfirstitem("ReadMail")
		Call noteDest.removeitem("ReadMail")
		Call item.copyitemtodocument(noteDest, "ReadMail")
	End If
	
	If (noteSrc.hasitem("WriteMail")) Then
		Set item = noteSrc.getfirstitem("WriteMail")
		Call noteDest.removeitem("WriteMail")
		Call item.copyitemtodocument(noteDest, "WriteMail")
	End If
	If (noteSrc.hasitem("EditMail")) Then
		Set item = noteSrc.getfirstitem("EditMail")
		Call noteDest.removeitem("EditMail")
		Call item.copyitemtodocument(noteDest, "EditMail")
	End If
	If (noteSrc.hasitem("DeleteMail")) Then
		Set item = noteSrc.getfirstitem("DeleteMail")
		Call noteDest.removeitem("DeleteMail")
		Call item.copyitemtodocument(noteDest, "DeleteMail")
	End If
	If (noteSrc.hasitem("PublicRead")) Then
		noteDest.PublicRead=noteSrc.PublicRead(0)
		Set item = noteSrc.getfirstitem("ReadCalendar")
		Call noteDest.removeitem("ReadCalendar")
		Call item.copyitemtodocument(noteDest, "ReadCalendar")
	End If
	If (noteSrc.hasitem("PublicWrite")) Then
		noteDest.PublicWrite=noteSrc.PublicWrite(0)
		Set item = noteSrc.getfirstitem("WriteCalendar")
		Call noteDest.removeitem("WriteCalendar")
		Call item.copyitemtodocument(noteDest, "WriteCalendar")
	End If
	
	noteDest.Sunday = noteSrc.sunday(0)
	noteDest.Monday = noteSrc.monday(0)
	noteDest.tuesday = noteSrc.Tuesday(0)
	noteDest.Wednesday = noteSrc.Wednesday(0)
	noteDest.Thursday = noteSrc.Thursday(0)
	noteDest.Friday = noteSrc.Friday(0)
	noteDest.Saturday = noteSrc.Saturday(0)
	
	For x = 1 To 7
		Set item = noteSrc.GetFirstItem("$Times" & x)
		If Not(item Is Nothing) Then 
			Call noteDest.RemoveItem(item.name)
			Call item.copyitemtodocument(noteDest,"")
		End If               
	Next
	
End Sub
'++LotusScript Development Environment:2:1:wGetDBPath:1:8
Function wGetDBPath  As Variant
	Dim strtmp As String
	Dim npos As Integer
	Dim nposofspace As Integer
	On Error Goto errorroutine
	wGetDBPath=""
        'check to see if the database is in a directory
	If Instr(db.filepath,"\") Or  Instr(db.filepath, " ") Then
		If Instr(db.filepath, "\") Then
			strtmp = db.filepath
			npos = 1
			While Instr(npos, strtmp, "\")  > 0 
				
               'extract to the backslash
				nposofspace = Instr(npos, strtmp, "\")
               'replace the slash with a double slash
				strtmp = Left(strtmp, nposofspace -1 )+"/"+Right$(strtmp, (Len(strtmp)-nposofspace))
				npos = nposofspace+1
			Wend
		End If
		If Instr(db.filepath, " ") Then
			npos = 1
			While Instr(npos, strtmp, " ") > 0 
               'extract to the space
				nposofspace = Instr(npos, strtmp, " ")
               'replace the space with a + sign
				strtmp = Left$(strtmp, nposofspace -1 )+"+"+Right$(strtmp, (Len(strtmp)-nposofspace))
				npos = nposofspace+1
			Wend
			
		End If
	End If
	wgetdbpath = strtmp	
	If wgetdbpath="" Then wgetdbpath = db.filepath
	
	Exit Function
errorroutine:
	Msgbox "Error is:"+Cstr(Error)
End Function
'++LotusScript Development Environment:2:2:SetInternationalFormatHelpers:1:8
Sub SetInternationalFormatHelpers( note As NotesDocument)
	
	Const DayString = "DD"
	Const MonthString = "MM"
	Const YearString = "YY"
	Const HourString = "HH"
	Const MinuteString = "MM"
	
	Dim s As New NotesSession
	Dim intl As NotesInternational
	
	Set intl = s.International
	
     ' do the date format helper
	
	Dim dHelp1 As String
	Dim dHelp2 As String
	Dim dHelp3 As String
	Dim tHelp1 As String
	Dim tHelp2 As String
	
	If intl.isDateDMY Then
		dHelp1 = DayString
		dHelp2 = MonthString
		dHelp3 = YearString
	Elseif intl.isDateMDY Then
		dHelp1 = MonthString
		dHelp2 = DayString
		dhelp3 =  YearString
	Else
		dHelp1 = YearString
		dHelp2 = MonthString
		dHelp3 = DayString
	End If
	
	note.DateFormatHelper = dHelp1 + intl.DateSep + dHelp2 + intl.DateSep + dhelp3
	note.DateFormatHelper2 = dHelp1 + intl.DateSep + dHelp2 + intl.DateSep + dhelp3
	
     ' do the time format helper
	tHelp1 = HourString + intl.TimeSep + MinuteString
	
	If Not intl.isTime24Hour Then
		tHelp2 = " " + intl.PMString           
	End If
	
	note.TimeFormatHelper = tHelp1 + tHelp2
	note.TimeFormatHelper2 = tHelp1 + tHelp2
	note.DurationFormatHelper = tHelp1
	note.DurationFormatHelper2 = tHelp1
	
End Sub
'++LotusScript Development Environment:2:2:wMarkTempFields:1:8
Sub wMarkTempFields(doc As NotesDocument)
	Dim itemlist As Variant
'Mark all temporary and compute for display fields such that they will not be saved to disk     
	On Error Resume Next
	itemlist = doc.Items
	Forall n In itemlist
		If Lcase(Left(n.Name, 3)) = "tmp" Or Lcase(Left(n.Name, 4)) = "disp" Then n.SaveToDisk = False
	End Forall     
	
	
     'remove web CGI variable so that they will get updated on the next doc read
	Call doc.RemoveItem("Path_Info")
	Call doc.RemoveItem("Query_String")
	
     'if the mail option fields are all default values, remove them
	If (doc.Importance(0) = "2" And doc.DeliveryPriority(0) = "N" And doc.DeliveryReport(0) = "B" And _
	doc.Form(0) <> "Task") Then
		Call doc.RemoveItem("Importance")
		Call doc.RemoveItem("DeliveryPriority")
		Call doc.RemoveItem("DeliveryReport")
	End If
End Sub
'++LotusScript Development Environment:2:2:wCreateDefaultCalendarProfile:1:8
Sub wCreateDefaultCalendarProfile
%REM
 *This routine creates a calendar profile document
  containg default values for required fields
%END REM
	On Error Goto ErrorRoutine
'the global variable "profile" is a profile document already
'we need to add the fields to it
	profile.Form = "CalendarProfile"
	Call profile.ComputeWithForm(False, False)	
	profile.wDefaultMailOpt = "2"
	profile.wCalGridType = "3"	
	Call profile.Save(True,True,True)
	Exit Sub
ErrorRoutine:
	Messagebox(Cstr(Err)+":  "+Error+" wCreateDefaultCalendarProfile")
End Sub
'++LotusScript Development Environment:2:1:wGetCalendarProfile:1:8
Function wGetCalendarProfile As Integer
	On Error Goto ErrorRoutine
	wGetCalendarProfile=True
	Set profile = db.GetProfileDocument("CalendarProfile")
	If (profile.IsNewNote) Or  (Len(profile.getitemvalue("Owner")(0)) = 0) Then wCreateDefaultCalendarProfile	
	If profile.getitemvalue("Owner")(0) = "" Then wGetCalendarProfile=False
	Owner = profile.getitemvalue("Owner")(0)
	Exit Function
ErrorRoutine:
	Messagebox(Cstr(Err)+":  "+Error+" wGetCalendarProfile")
End Function
'++LotusScript Development Environment:2:2:CSDocSaveRepeatingEntry:1:8
Sub CSDocSaveRepeatingEntry(vBEobject As Variant)
	Dim nContext As Integer, nChangeWhich As Integer
	
	nContext = vBEobject.Context
	
	If (nContext = CTX_REPEAT_INST Or nContext = CTX_REPEAT_MSG) Then
		nChangeWhich = vBEObject.RepeatModify
		If nChangeWhich <> REPEAT_CANCEL Then Call vBEObject.ApplyRepeatChanges(nChangeWhich)
	End If
End Sub
'++LotusScript Development Environment:2:1:CSGetMainEventObject:1:8
Function CSGetMainEventObject(vBEObject As Variant) As Variant
	Select Case vBEObject.Context
	Case CTX_REPEAT_MSG
		Set CSGetMainEventObject = vbeobject.RepeatInstanceEvent
	Case CTX_REPEAT_NONE
		If (vBEObject.Document.IsResponse) Then
			Set CSGetMainEventObject = vbeobject.ParentEvent
		Else
			Set CSGetMainEventObject = vbeobject	
		End If
	Case Else
		Set CSGetMainEventObject = vBEObject		
	End Select
End Function
'++LotusScript Development Environment:2:2:Initialize:1:10
Sub Initialize
End Sub
'++LotusScript Development Environment:2:1:CSNoteGetType:1:8
Function CSNoteGetType(note As notesdocument) As Integer
	Dim strForm As String
	
	strForm = note.getitemvalue("Form")(0)
	
	If Instr(1, strForm, "reservation", 1) > 0 Then
		CSNoteGetType = 3
	Elseif Instr(1, strForm, "task", 1) > 0 Then
		CSNoteGetType = 2
	Else
		CSNoteGetType = 1
	End If
End Function
'++LotusScript Development Environment:2:1:CSProfileGetAutoAnnivRepeat:1:8
Function CSProfileGetAutoAnnivRepeat() As Integer
	Dim session As New notessession
	Dim profile As notesdocument
	Dim vValue As Variant
	
	Set profile = session.currentdatabase.getprofiledocument("CalendarProfile")
	
	vValue = profile.getitemvalue("AutoAnniversaryRepeat")(0)
	
	If Isnumeric(vValue) Then
		CSProfileGetAutoAnnivRepeat = vValue
	Else
		CSProfileGetAutoAnnivRepeat = 0
	End If
End Function
'++LotusScript Development Environment:2:1:CSEventPerformAction:1:8
Function CSEventPerformAction(vBEObject As Variant, Byval strAction As String, Byval bSendNow As Integer, vArgs As Variant) As Integer
	Dim note As notesdocument
	Dim bKeepPosted As Integer, fCancelFlags As Integer
	
	Set note = vBEObject.Document
	
	Select Case strAction
	Case ORS_MSGTYPE_ACCEPT	
		If (note.GetItemValue("tmpPencilIn")(0) = "1") Then strAction = ORS_MSGTYPE_PENCILIN
		
	Case ORS_MSGTYPE_CANCEL
		      ' See if the user wants to delete the event; if they do, we must mark our owning document
		      ' for deletion and let the backend remove the responses; otherwise, we end up removing the document
		      ' from underneath ourselves
		fCancelFlags = Cint(vArgs)
		If (note.GetItemValue("tmpDeleteEntry")(0) = "1" And Not((fCancelFlags And REMOVE_DELETED) = REMOVE_DELETED)) Then
			fCancelFlags = fCancelFlags Or REMOVE_RESPONSES
			vArgs = Cint(fCancelFlags)
		End If
		
	Case ORS_MSGTYPE_DELEGATING, ORS_MSGTYPE_REJECT
		bKeepPosted = (note.GetItemValue("tmpKeepPosted")(0) = "1")
		vArgs = Cint(bKeepPosted)
	End Select
	
	CSEventPerformAction = CSEventPerformActionGuts(vBEObject, strAction, bSendNow, vArgs)
End Function
'++LotusScript Development Environment:2:1:CSEventPerformActionGuts:1:8
Function CSEventPerformActionGuts(vBEObject As Variant, strAction As String, bSendNow As Integer, vArgs As Variant) As Integer
	If Isarray(vArgs) = False Then
		If Datatype(vArgs) = 8 Then
			Call vbeobject.ActionHandler(strAction, Cint(bSendNow), Cstr(vArgs))
		Elseif Isnumeric(vArgs) Then
			Call vbeobject.ActionHandler(strAction, Cint(bSendNow), Cint(vArgs))
		End If
	Else
		Call vbeobject.ActionHandler(strAction, Cint(bSendNow), vArgs)
	End If
End Function